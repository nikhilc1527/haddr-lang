func puti num do
   if num < 0 do
      . 45;
      num = 0 - num;
   else end;
   if num do
      dig_len = 2;
      digits = [dig_len];
      i = 0;
      while num > 0 do
         if i > dig_len-1 do
            new_dig_len = dig_len * 2;
            new_arr = [dig_len * 2];
            j = 0;
            while j < dig_len do
               new_arr[j] = digits[j];
               j = j + 1;
            end;
            digits = new_arr;
            dig_len = new_dig_len;
         else end;
         
         digits[i] = num % 10;
         num = num / 10;
         i = i + 1;
      end;
      i = i - 1;
      while i > 0-1 do
         . digits[i] + 48;
         i = i - 1;
      end;
   else . 48; end;
end;

nums = "08022297381500400075040507785212507791084949994017811857608717409843694804566200814931735579142993714067538830034913366552709523046011426924685601325671370236912231167151676389419236542240402866331380244732609903450244753353783684203517125032988128642367102638406759547066183864706726206802621220956394396308409166499421245558056673992697177878968314883489637221362309750076442045351400613397343133957817532822753167159403800462161409535692163905429635314755588824001754243629855786560048357189070544443744602158515417581980816805944769287392138652177704895540045208839735991607975732162626793327986688366887576220720346336746551232639353690442167338253911249472180846293240627636206936417230238834629969826759857404361620733529783190017431497148868116235705540170547183515469169233486143520189196748";

func get_nums nums nums_len do
     new_nums = [nums_len];
     i = 0;
     while i < nums_len do
           new_nums[i] = (nums[i*2] - 48) * 10 + (nums[i*2+1] - 48);
           i = i + 1;
     end;
     new_nums
end;
nums = get_nums(nums, 400);

max_prod = 1;
a = 0;
b = 0;
c = 0;
d = 0;

. "doing horizontal"; . 10;

// horizontal
i = 0;
j = 0;
while j < 20 do
  i = 0;
  while i < 16 do
    prod = nums[j*20+i] * nums[j*20+i+1] * nums[j*20+i+2] * nums[j*20+i+3];
    if prod > max_prod do
       max_prod = prod; a = nums[j*20+i]; b = nums[j*20+i+1]; c = nums[j*20+i+2]; d = nums[j*20+i+3];
       puti(a); . 32; puti(b); . 32; puti(c); . 32; puti(d); . 10;
    else end;
    i = i + 1;
  end;
  j = j + 1;
end;

. "doing vertical"; . 10;

// vertical
i = 0;
j = 0;
while i < 20 do
      j = 0;
      while j < 16 do
        prod = nums[j*20+i] * nums[(j+1)*20+i] * nums[(j+2)*20+i] * nums[(j+3)*20+i];
        if prod > max_prod do max_prod = prod; a = nums[j*20+i]; b = nums[(j+1)*20+i]; c = nums[(j+2)*20+i]; d = nums[(j+3)*20+i];        puti(a); . 32; puti(b); . 32; puti(c); . 32; puti(d); . 10;else end;
        j = j + 1;
      end;
      i = i + 1;
end;

. "doing diagonal top left to bottom right"; . 10;

// diagonal top left to bottom right
i = 0;
j = 0;
while i < 16 do
      j = 0;
      while j < 16 do
            prod = nums[(j)*20 + i] * nums[(j+1)*20 + i+1] * nums[(j+2)*20 + i+2] * nums[(j+3)*20 + i+3];
            if prod > max_prod do max_prod = prod; a = nums[(j)*20 + i]; b = nums[(j+1)*20 + i+1]; c = nums[(j+2)*20 + i+2]; d = nums[(j+3)*20 + i+3];        puti(a); . 32; puti(b); . 32; puti(c); . 32; puti(d); . 10; else end;
            j = j + 1;
      end;
      i = i + 1;
end;

. "doing diagonal top right to bottom left"; . 10;

// diagonal top right to bottom left
i = 0;
j = 0;
while j < 16 do
      i = 3;
      while i < 20 do
            prod = nums[(j)*20 + i] * nums[(j+1)*20 + i-1] * nums[(j+2)*20 + i-2] * nums[(j+3)*20 + i-3];
            if prod > max_prod do max_prod = prod; a = nums[(j)*20 + i]; b = nums[(j+1)*20 + i-1]; c = nums[(j+2)*20 + i-2]; d = nums[(j+3)*20 + i-3];        puti(a); . 32; puti(b); . 32; puti(c); . 32; puti(d); . 10; else end;
            i = i + 1;
      end;
      j = j + 1;
end;

puti(max_prod); . 10;
puti(a); . 32;
puti(b); . 32;
puti(c); . 32;
puti(d); . 10;
