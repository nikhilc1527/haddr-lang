const WIDTH: i64 = 15;
const HEIGHT: i64 = 15;

proc max(a: i64, b: i64) -> i64 {
  if (a > b) return a;
  else return b;
}

proc main() -> () {
  let numsstr: *i8 = "75
95 64
17 47 82
18 35 87 10
20 04 82 47 65
19 01 23 75 03 34
88 02 77 73 07 63 67
99 65 04 28 06 16 70 92
41 41 26 56 83 40 80 70 33
41 48 72 33 47 32 37 16 94 29
53 71 44 65 25 43 91 52 97 51 14
70 11 33 28 77 73 17 78 39 68 17 57
91 71 52 38 17 14 91 43 58 50 27 29 48
63 66 04 68 89 53 67 30 73 16 69 87 40 31
04 62 98 27 23 09 70 98 73 93 38 53 60 04 23";

//   let numsstr: *i8 = "03
// 07 04
// 02 04 06
// 08 05 09 03";

  let curpointer: *i8 = numsstr;
  let nums: [[i64; WIDTH]; HEIGHT] = 0;
  for (let i: i8 = 0; i < HEIGHT; i = i + 1) {
    for (let j: i8 = 0; j <= i; j = j + 1) {
      let cur: i64 = (curpointer[0] - '0') * 10 + (curpointer[1] - '0');
      curpointer = curpointer + 3;
      nums[i][j] = cur;
    }
  }
  for (let i: i8 = 0; i < HEIGHT; i = i + 1) {
    for (let j: i8 = 0; j <= i; j = j + 1) {
      puti(nums[i][j]);
      putch(' ');
    }
    putch(10);
  }

  let paths: [[i64; WIDTH]; HEIGHT] = 0;
  paths[0][0] = nums[0][0];
  for (let i: i8 = 1; i < HEIGHT; i = i + 1) {
    paths[i][0] = paths[i-1][0] + nums[i][0];
    paths[i][i] = paths[i-1][i-1] + nums[i][i];
    for (let j: i8 = 1; j < i; j = j + 1) {
      paths[i][j] = max(paths[i-1][j], paths[i-1][j-1]) + nums[i][j];
    }
  }

  for (let i: i8 = 0; i < HEIGHT; i = i + 1) {
    for (let j: i8 = 0; j <= i; j = j + 1) {
      puti(paths[i][j]);
      putch(' ');
    }
    putch(10);
  }

  let maximum: i64 = 0;
  for (let i: i64 = 0; i < WIDTH; i = i + 1) {
    maximum = max(maximum, paths[HEIGHT-1][i]);
  }

  printi(maximum);
}
