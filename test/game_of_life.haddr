proc move_left(n : i64) {
  putch(27);
  putch(91);
  puti(n);
  putch(68);
}
proc move_up(n : i64) {
  putch(27);
  putch(91);
  puti(n);
  putch(65);
}
proc reset_board(width : i64, height : i64) {
  move_left(width);
  move_up(height);
}

proc main() {
  unbuffer_term();
  nonblock();

  let BOARD_WIDTH : i64 = 21;
  let BOARD_HEIGHT : i64 = 10;
  let board: [[i64; 21]; 10] = 0;
  let new_board: [[i64; 21]; 10] = 0;
  let i : i64 = 0;
  let j : i64 = 0;
  while (i < BOARD_HEIGHT) {
    j = 0;
    while (j < BOARD_WIDTH) {
      board[i][j] = 0;
      j = j + 1;
    }
    i = i + 1;
  }

  i = 0;
  while (i < BOARD_WIDTH / 7) {
    j = 0;
    while (j < BOARD_HEIGHT / 5) {
      let x: i64 = i * 7;
      let y: i64 = j * 5;
      board[0 + y][1 + x] = 1;
      board[1 + y][2 + x] = 1;
      board[2 + y][0 + x] = 1;
      board[2 + y][1 + x] = 1;
      board[2 + y][2 + x] = 1;
      j = j + 1;
    }
    i = i + 1;
  }

  let z : i64 = 1;

  i = 0;
  j = 0;

  i = 0;
  while (i < BOARD_HEIGHT) {
    j = 0;
    while (j < BOARD_WIDTH) {
      if (board[i][j] == 0)
        putch(46);
      else
        putch(35);
      j = j + 1;
    }
    putch(10);
    i = i + 1;
  }

  while (z > 0) {
    i = 0;
    while (i < BOARD_HEIGHT) {
      j = 0;
      while (j < BOARD_WIDTH) {
        let neighbors : i64 = 0;

        let x : i64 = 0 - 1;
        while (x < 2) {
          let y : i64 = 0 - 1;
          while (y < 2) {
            let a : i64 = (i + x + BOARD_HEIGHT) % BOARD_HEIGHT;
            let b : i64 = (j + y + BOARD_WIDTH) % BOARD_WIDTH;
            let c : i64 = board[a][b];
            neighbors = neighbors + c;
            y = y + 1;
          }
          x = x + 1;
        }

        neighbors = neighbors - board[i][j];
        let cur_val : i64 = board[i][j];
        let new_val : i64 = 0;
        if (cur_val && (neighbors == 2 || neighbors == 3))
          new_val = 1;
        else if ((1 - cur_val) && (neighbors == 3))
          new_val = 1;
        else
          new_val = 0;
        new_board[i][j] = new_val;

        j = j + 1;
      }
      i = i + 1;
    }

    i = 0;
    j = 0;
    while (i < BOARD_HEIGHT) {
      j = 0;
      while (j < BOARD_WIDTH) {
        board[i][j] = new_board[i][j];
        j = j + 1;
      }
      i = i + 1;
    }

    reset_board(BOARD_WIDTH, BOARD_HEIGHT);

    i = 0;
    while (i < BOARD_HEIGHT) {
      j = 0;
      while (j < BOARD_WIDTH) {
        if (board[i][j] == 0)
          putch(46);
        else
          putch(35);
        j = j + 1;
      }
      putch(10);
      i = i + 1;
    }

    z = z + 1;
    sleep_for(100000);
    if (getch() == 113) z = 0-1;
  }
}
