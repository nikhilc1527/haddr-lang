import "std.haddr";

const BOARD_WIDTH: i64 = 40;
const BOARD_HEIGHT: i64 = 10;

proc unbuffer_term() -> () {
  let tio: [i32; 15] = 0;

  // get the terminal settings for stdin
  syscall3(SYS_ioctl, stdin, TCGETS, tio);

  // disable canonical mode (buffered i/o) and local echo
  // new_tio.c_lflag &= (~ICANON & ~ECHO);
  tio[3] = tio[3] & (0-3) & (0-9);

  // set the new settings immediately
  // tcsetattr(STDIN_FILENO, TCSANOW, &new_tio);
  syscall3(SYS_ioctl, stdin, TCSETS+0, tio);
}

proc nonblock() -> () {
  let fd: i64 = stdin;
  let flags: i64 = syscall3(SYS_fcntl, fd, F_GETFL, 0);
  syscall3(SYS_fcntl, fd, F_SETFL, flags | O_NONBLOCK);
}

proc move_left(n : i64)->() {
  putch(27);
  putch('[');
  puti(n);
  putch('D');
}
proc move_up(n : i64)->() {
  putch(27);
  putch('[');
  puti(n);
  putch('A');
}
proc reset_board()->() {
  move_left(BOARD_WIDTH);
  move_up(BOARD_HEIGHT);
}

proc print_board(board: *[i64; BOARD_WIDTH], board_str: *i8) -> () {
  for (let i : i64 = 0; i < BOARD_HEIGHT; i = i + 1) {
    for (let j : i64 = 0; j < BOARD_WIDTH; j = j + 1) {
      if (board[i][j] == 0)
        board_str[i * (BOARD_WIDTH + 1) + j] = '.';
      else
        board_str[i * (BOARD_WIDTH + 1) + j] = '#';
    }
    board_str[i * (BOARD_WIDTH + 1) + BOARD_WIDTH] = 10;
  }
  syscall3(SYS_write, stdout, board_str, BOARD_HEIGHT * (BOARD_WIDTH + 1));
}

proc get_neighbors(board: *[i64; BOARD_WIDTH], i: i64, j: i64) -> i64 {
  let neighbors : i64 = 0;

  for (let x : i64 = 0 - 1; x < 2; x = x + 1) {
    for (let y : i64 = 0 - 1; y < 2; y = y + 1) {
      let a : i64 = (i + x + BOARD_HEIGHT) % BOARD_HEIGHT;
      let b : i64 = (j + y + BOARD_WIDTH) % BOARD_WIDTH;
      let c : i64 = board[a][b];
      neighbors = neighbors + c;
    }
  }
  neighbors = neighbors - board[i][j];

  return neighbors;
}

proc gen_board(old_board: *[i64; BOARD_WIDTH], new_board: *[i64; BOARD_WIDTH]) -> () {
  for (let i : i64 = 0; i < BOARD_HEIGHT; i = i + 1) {
    for (let j : i64 = 0; j < BOARD_WIDTH; j = j + 1) {
      let neighbors : i64 = 0;
      neighbors = get_neighbors(old_board, i, j);

      let cur_val : i64 = old_board[i][j];
      let new_val : i64 = 0;
      if (cur_val && (neighbors == 2 || neighbors == 3))
        new_val = 1;
      else if ((1 - cur_val) && (neighbors == 3))
        new_val = 1;
      else
        new_val = 0;
      new_board[i][j] = new_val;
    }
  }
}

proc copy_board(old_board: *[i64; BOARD_WIDTH], new_board: *[i64; BOARD_WIDTH]) -> () {
  for (let i : i64 = 0; i < BOARD_HEIGHT; i = i + 1) {
    for (let j : i64 = 0; j < BOARD_WIDTH; j = j + 1) {
      new_board[i][j] = old_board[i][j];
    }
  }
}

proc put_glider(board: *[i64; BOARD_WIDTH], i: i64, j: i64) -> () {
  board[(i+0) % BOARD_HEIGHT][(j+1) % BOARD_WIDTH] = 1;
  board[(i+1) % BOARD_HEIGHT][(j+2) % BOARD_WIDTH] = 1;
  board[(i+2) % BOARD_HEIGHT][(j+0) % BOARD_WIDTH] = 1;
  board[(i+2) % BOARD_HEIGHT][(j+1) % BOARD_WIDTH] = 1;
  board[(i+2) % BOARD_HEIGHT][(j+2) % BOARD_WIDTH] = 1;
}

proc main() -> () {
  unbuffer_term();
  nonblock();

  let board: [[i64; BOARD_WIDTH]; BOARD_HEIGHT] = 0;
  let new_board: [[i64; BOARD_WIDTH]; BOARD_HEIGHT] = 0;
  let board_str: [i8; (BOARD_WIDTH + 1) * BOARD_HEIGHT] = 0;

  for (let i : i64 = 0; i < BOARD_HEIGHT; i = i + 1) {
    for (let j : i64 = 0; j < BOARD_WIDTH; j = j + 1) {
      board[i][j] = 0;
    }
  }

  for (let i : i64 = 0; i < 10; i = i + 1) {
    let x : i64 = i * 4;
    put_glider(board, x, x);
  }

  let z : i64 = 1;

  print_board(board, board_str);

  while (z > 0) {
    gen_board(board, new_board);

    copy_board(new_board, board);

    reset_board();

    print_board(board, board_str);

    sleep(0, 100000000);
    if (getch() == 113) z = 0 - 1;
  }
}
